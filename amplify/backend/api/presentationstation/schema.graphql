type S3Object {
  key: String!
  identityId: String!
}

enum PageSizeEnum {
  Small
  Medium
  Large
}

enum ClientGroupEnum {
  NOA
  TPCI
  WTC
}

type Project
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["WTC", "Admin"] }
      { allow: groups, groupsField: "client", operations: [read] }
    ]
  )
  @key(name: "ByClient", fields: ["client"], queryField: "projectsByClient")
  @key(name: "BySlug", fields: ["slug"], queryField: "projectsBySlug") {
  id: ID!
  title: String!
  slug: String!
  client: ClientGroupEnum!
  description: String
  logo: S3Object
  concepts: [Concept]
    @connection(keyName: "byConcept", fields: ["id"], sortField: "createdAt")
}

type Concept
  @model(queries: null)
  @key(name: "byConcept", fields: ["projectID"])
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin", "WTC"]
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String!
  moodboard: S3Object
  pages: [Page]
    @connection(keyName: "byPage", fields: ["id"], sortField: "createdAt")
  projectID: ID!
}

type Page
  @model(queries: null)
  @key(name: "byPage", fields: ["conceptID"])
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin", "WTC"]
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String!
  variants: [PageVariant]
    @connection(keyName: "byVariant", fields: ["id"], sortField: "createdAt")
  conceptID: ID!
}

type PageVariant
  @model(queries: null)
  @key(name: "byVariant", fields: ["pageID"])
  @key(name: "BySize", fields: ["size"], queryField: "pageVariantBySize")
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin", "WTC"]
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  size: PageSizeEnum!
  image: S3Object!
  pageID: ID!
}
